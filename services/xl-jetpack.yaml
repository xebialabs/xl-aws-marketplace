AWSTemplateFormatVersion: 2010-09-09
Description: |
  This template will launch the AWS Marketplace XL JetPack containers in an existing ECS cluster.
# Metadata: 
Parameters: 
  VPCID:
    Description: The VPC Id
    Type: AWS::EC2::VPC::Id
  ECSCluster:
    Description: The provisioned ECS Cluster ID
    Type: String
  ECSServiceRole:
    Description: The ECS Service role
    Type: String
  Fulfilment:
    Description: The AWS Marketplace fulfilment.
    Type: String
    AllowedValues: ['XL-JetPack-10users']
  XLJetPackVersion:
    Description: The version of XL JetPack to deploy
    AllowedValues: ['8.6.1']
    Type: String
  XLJetPackDeployAdminPassword:
    Description: The admin password of XL JetPack Deploy
    MinLength: 8
    Type: String
    NoEcho: True
  XLJetPackDeployPort:
    Description: The port to run XL JetPack Deploy on
    AllowedPattern: ^[1-9][0-9]{3,4}$
    Type: String
    Default: '4516'
  XLJetPackReleaseAdminPassword:
    Description: The admin password of XL JetPack Release
    MinLength: 8
    Type: String
    NoEcho: True
  XLJetPackReleasePort:
    Description: The port to run XL JetPack Release on
    AllowedPattern: ^[1-9][0-9]{3,4}$
    Type: String
    Default: '5516'
  LoadBalancer:
    Description: The Application Load Balancer to register with
    Type: String
  ALBSecurityGroup:
    Description: The Application Load Balancer security group to attach ingress rules to
    Type: AWS::EC2::SecurityGroup::Id
  RemoteAccessCIDR:
    Description: CIDR block for remote access
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  TaskExecutionRole:
    Description: The Task Execution Role
    Type: String
  DBHost:
    Description: The Postgres DB Host/Endpoint
    Type: String
  DBPort:
    Description: The Postgres DB Port
    Type: String
    Default: 5432
  DBUser:
    Description: The Postgres DB username
    Type: String
  DBPassword:
    Description: The Postgres DB Password
    Type: String
    NoEcho: True
  MountPoint:
    Description: The Linux mount point for the EFS volume
    Type: String
    MinLength: '1'
    Default: /mnt/efs
  SslCertificateArn:
    Description: The ARN of the SSL certificate used to secure internet access to the XebiaLabs JetPack instances
    Type: String
    Default: ':default'

Mappings:
  Marketplace:
    'XL-JetPack-10users':
      AWSProductCode: 75neoqyxrij1cptfd2gj57kdv
      AWSPublicKey: |
        -----BEGIN PUBLIC KEY-----
        MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAyLVyE9w1lMsVq+RHxzw0
        r13ifEHsRbySd3t/mDuRr+jZYBaEUgi/EKGT+Y/JNysIY+mfv0Im47/VIHf2OSFb
        AL4qPtmvsMesvNkiOw+A2fkLB4HtBoO4i4S7O1NJzhlQpcxF43m9YN7lPdC6+99I
        /l38sO//RNgf3bgIwaJjjPHwk3bwXjG8dgZqcD1jjZHherSiECf/bBOc9urb81Lp
        rlgOHknQcSQ8+dISiUrbzEe4Lv26RLyaBhHfZreHK0CDgs9KAU5OaM32mnc6vsMe
        Vgy2Zpc3HxbnQxPB/8GubhMYN6rU2rUgkIyxVk73Vsc7ZiEGe1p0mRz5WDkdnc3g
        ncdpDTvYx2Y8cH5XyL7jL8SWJoVDuLyEg3LHH3HVLMw6RDQDSPpZvyhQee2GhYmr
        hJci57QJf9Tmwl4XRpaDCsnJfxZeQr4QnhrWeMyrX/VAAnq6H3bMPrudetovG2sF
        lrJaNvkOCNUGBd76aP8yi/+CQ2Au3e1sKpTFKkCidgXZAgMBAAE=
        -----END PUBLIC KEY-----
      AWSPublicKeyVersion: 1
  ContainerGroup:
    '8.6.1':
      Group: 'cg-2281266242'
      VersionSuffix: "-latest"
Conditions: 
  SslCertificateProvided: !Not [ !Equals [ !Ref SslCertificateArn, ':default' ] ]

Resources:
  JetPackDeployService:
    Type: AWS::ECS::Service
    DependsOn: [ XLJetPackDeployALBListener ]
    Properties:
      Cluster: !Ref ECSCluster
      Role: !Ref ECSServiceRole
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: xl-jetpack-deploy
          ContainerPort: !Ref XLJetPackDeployPort
          TargetGroupArn: !Ref XLJetPackDeployTargetGroup
      TaskDefinition: !Ref JetPackDeployTaskDefinition
  JetPackReleaseService:
    Type: AWS::ECS::Service
    DependsOn: [ XLJetPackReleaseALBListener ]
    Properties:
      Cluster: !Ref ECSCluster
      Role: !Ref ECSServiceRole
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: xl-jetpack-release
          ContainerPort: !Ref XLJetPackReleasePort
          TargetGroupArn: !Ref XLJetPackReleaseTargetGroup
      TaskDefinition: !Ref JetPackReleaseTaskDefinition
  JetPackDeployTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !Ref TaskExecutionRole
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: xl-jetpack-deploy
          #Image: !Join [ "", ["xebialabs/xl-jetpack-deploy:", !Ref XLJetPackVersion, "-amazonlinux" ] ]
          Image: !Join 
            - ""
            - - "117940112483.dkr.ecr.us-east-1.amazonaws.com/78e3b5db-bc6e-4596-9a0c-74624d2633f3/"
              - !FindInMap [ ContainerGroup, !Ref XLJetPackVersion, Group ]
              - "/xebialabs/xl-jetpack-deploy:"
              - !Ref XLJetPackVersion
              - !FindInMap [ ContainerGroup, !Ref XLJetPackVersion, VersionSuffix ]
          Memory: 2048
          Cpu: 2
          PortMappings:
            - ContainerPort: !Ref XLJetPackDeployPort
              Protocol: tcp
          Environment:
            - Name: ADMIN_PASSWORD
              Value: !Ref XLJetPackDeployAdminPassword
            - Name: XL_CLUSTER_MODE
              Value: default
            - Name: XL_DB_URL
              Value: !Sub "jdbc:postgresql://${DBHost}:${DBPort}/xldeploy"
            - Name: XL_DB_USERNAME
              Value: !Ref DBUser
            - Name: XL_DB_PASSWORD
              Value: !Ref DBPassword
            - Name: XL_METRICS_ENABLED
              Value: "false"
            - Name: XL_LICENSE_KIND
              Value: aws
            - Name: AWS_PRODUCT_CODE
              Value: !FindInMap [ Marketplace, !Ref Fulfilment, AWSProductCode ]
            - Name: AWS_PUBLIC_KEY_VERSION
              Value: !FindInMap [ Marketplace, !Ref Fulfilment, AWSPublicKeyVersion ]
            - Name: AWS_PUBLIC_KEY
              Value: !FindInMap [ Marketplace, !Ref Fulfilment, AWSPublicKey ]
          Hostname: xl-jetpack-deploy
          MountPoints:
            - ContainerPath: "/opt/xebialabs/xl-deploy-server/work"
              SourceVolume: xl-deploy-work-efs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: xl-jetpack-deploy
      Volumes:
        - Host:
            SourcePath: !Sub "${MountPoint}/xl-deploy/work"
          Name: xl-deploy-work-efs
  JetPackReleaseTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !Ref TaskExecutionRole
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: xl-jetpack-release
          # Image: !Join [ "", ["xebialabs/xl-jetpack-release:", !Ref XLJetPackVersion, "-amazonlinux" ] ]
          Image: !Join 
            - ""
            - - "117940112483.dkr.ecr.us-east-1.amazonaws.com/78e3b5db-bc6e-4596-9a0c-74624d2633f3/"
              - !FindInMap [ ContainerGroup, !Ref XLJetPackVersion, Group ]
              - "/xebialabs/xl-jetpack-release:"
              - !Ref XLJetPackVersion
              - !FindInMap [ ContainerGroup, !Ref XLJetPackVersion, VersionSuffix ]
          Memory: 2048
          Cpu: 2
          PortMappings:
            - ContainerPort: !Ref XLJetPackReleasePort
              Protocol: tcp
          Environment:
            - Name: ADMIN_PASSWORD
              Value: !Ref XLJetPackReleaseAdminPassword
            - Name: XL_CLUSTER_MODE
              Value: default
            - Name: XL_DB_URL
              Value: !Sub "jdbc:postgresql://${DBHost}:${DBPort}/xlrelease"
            - Name: XL_DB_USERNAME
              Value: !Ref DBUser
            - Name: XL_DB_PASSWORD
              Value: !Ref DBPassword
            - Name: XL_REPORT_DB_URL
              Value: !Sub "jdbc:postgresql://${DBHost}:${DBPort}/xlrarchive"
            - Name: XL_REPORT_DB_USERNAME
              Value: !Ref DBUser
            - Name: XL_REPORT_DB_PASSWORD
              Value: !Ref DBPassword
            - Name: XL_METRICS_ENABLED
              Value: "false"
            - Name: XL_LICENSE_KIND
              Value: aws
            - Name: AWS_PRODUCT_CODE
              Value: !FindInMap [ Marketplace, !Ref Fulfilment, AWSProductCode ]
            - Name: AWS_PUBLIC_KEY_VERSION
              Value: !FindInMap [ Marketplace, !Ref Fulfilment, AWSPublicKeyVersion ]
            - Name: AWS_PUBLIC_KEY
              Value: !FindInMap [ Marketplace, !Ref Fulfilment, AWSPublicKey ]
          Hostname: xl-jetpack-release
          MountPoints:
            - ContainerPath: "/opt/xebialabs/xl-release-server/work"
              SourceVolume: xl-release-work-efs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: xl-jetpack-release
      Volumes:
        - Host:
            SourcePath: !Sub "${MountPoint}/xl-release/work"
          Name: xl-release-work-efs

  XLJetPackDeployALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref XLJetPackDeployPort
      Protocol: !If [ SslCertificateProvided, HTTPS, HTTP ]
      Certificates:
        - !If [ SslCertificateProvided, { CertificateArn: !Ref SslCertificateArn }, !Ref 'AWS::NoValue' ]
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref XLJetPackDeployTargetGroup
  XLJetPackDeployTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      Port: !Ref XLJetPackDeployPort
      Protocol: HTTP
      Matcher:
        # The healthcheck endpoint is protected by the license checker, which will return 402 if no license is present.
        # Ensure that is treated as a healthy response also.
        HttpCode: 200-299,402
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /deployit/ha/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
  XLJetPackDeployIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !Ref RemoteAccessCIDR
      FromPort: !Ref XLJetPackDeployPort
      ToPort: !Ref XLJetPackDeployPort
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
  XLJetPackReleaseALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref XLJetPackReleasePort
      Protocol: !If [ SslCertificateProvided, HTTPS, HTTP ]
      Certificates:
        - !If [ SslCertificateProvided, { CertificateArn: !Ref SslCertificateArn }, !Ref 'AWS::NoValue' ]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref XLJetPackReleaseTargetGroup
  XLJetPackReleaseTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      Port: !Ref XLJetPackReleasePort
      Protocol: HTTP
      Matcher:
        # The healthcheck endpoint is protected by the license checker, which will return 402 if no license is present.
        # Ensure that is treated as a healthy response also.
        HttpCode: 200-299,402
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /ha/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
  XLJetPackReleaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !Ref RemoteAccessCIDR
      FromPort: !Ref XLJetPackReleasePort
      ToPort: !Ref XLJetPackReleasePort
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}"
# Outputs:
